// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- NEW ROLE ENUM ---
enum Role {
  USER
  ADMIN
}

// --- YOUR EXISTING ENUMS (NO CHANGES) ---
enum City {
  Chandigarh
  Mohali
  Zirakpur
  Panchkula
  Other
}

enum PropertyType {
  Apartment
  Villa
  Plot
  Office
  Retail
}

enum Bhk {
  One
  Two
  Three
  Four
  Studio
}

enum Purpose {
  Buy
  Rent
}

enum Timeline {
  ZeroToThreeMonths
  ThreeToSixMonths
  MoreThanSixMonths
  Exploring
}

enum Source {
  Website
  Referral
  WalkIn
  Call
  Other
}

enum Status {
  New
  Qualified
  Contacted
  Visited
  Negotiation
  Converted
  Dropped
}

// --- MODELS ---

// UPDATED USER MODEL FOR AUTH.JS
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(USER)
  accounts      Account[]
  sessions      Session[]
  buyers        Buyer[]
  history       BuyerHistory[]
}

// YOUR BUYER MODEL (NO CHANGES NEEDED)
model Buyer {
  id           String       @id @default(uuid())
  fullName     String
  email        String?
  phone        String
  city         City
  propertyType PropertyType
  bhk          Bhk?
  purpose      Purpose
  budgetMin    Int?
  budgetMax    Int?
  timeline     Timeline
  source       Source
  status       Status       @default(New)
  notes        String?      @db.Text
  tags         String[]     @default([])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  ownerId      String
  owner        User         @relation(fields: [ownerId], references: [id])
  history      BuyerHistory[]

  @@unique([ownerId, phone])
}

// YOUR BUYERHISTORY MODEL (NO CHANGES NEEDED)
model BuyerHistory {
  id          String   @id @default(uuid())
  changedAt   DateTime @default(now())
  diff        Json
  buyerId     String
  buyer       Buyer    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  changedById String
  changedBy   User     @relation(fields: [changedById], references: [id])
}

// --- NEW MODELS REQUIRED BY AUTH.JS ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}